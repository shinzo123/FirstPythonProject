import win32com.client as client
outlook = client.Dispatch('Outlook.Application')
namespace = outlook.GetNameSpace('MAPI')
from bs4 import BeautifulSoup
import pathlib
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.edge.service import Service
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from openpyxl import load_workbook
from prettytable import PrettyTable
import win32timezone

x = PrettyTable()
import time

inbox = namespace.Folders['HOME PC-UNDR-LEG-REG'].Folders['Inbox']
LRemails = [message for message in inbox.Items if 'LR-' in message.Subject if message.Sender.Address == "/o=ExchangeLabs/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=81405fd1ee2343ec8d6d0900629e0bb3-441J00"]
alreadySentLR = []


for email in LRemails:
    number = []
    fullLrStringCheckList = []
    links = []
    LrLink = ''
    date = ''
    year = "20" + email.SentOn.strftime("%y")
    LrState = ""
    LrIntroText = ''


    # returns the index of the email's action requested through the if you have questions field.
    def startstop(text, start, stop):
        n = text
        m = start
        o = stop
        product = []

        SSlist = [m, o]
        for i, j in enumerate(n):
            if n[i: i + len(SSlist[0])] == SSlist[0]:
                product.append(i)

            if n[i: i + len(SSlist[1])] == SSlist[1]:
                product.append(i - 1)
        return product
    C = startstop(email.Body, 'Action requested', 'If you have questions')
    try:
        LrIntroText = email.Body[C[0]:C[1]]

    except:
        print("This email did not contain an LR# no issue raised.")
        pass


    #returns the date
    date = email.SentOn.strftime("%m-%d-%y")

    # #this code finds the link to the LR-#
    links.append(BeautifulSoup(email.HTMLbody, "html.parser").select('a'))
    for object in links:
        for link in object:
            if link.text.startswith('LR-'):
                LrLink = link.get('href')

    # This code looks through the LR emails and extracts the LR-number and creates a new folder for each
    con = str(email)
    for i,j in enumerate(con):
       if con[int(i)] == 'L' and con[int(i)+1] == 'R' and con[int(i)+2] == '-':
           number.append(con[i+3:i+7])

    for numbers in number:
        numbers = 'LR-' + numbers
        fullLrStringCheckList.append(numbers)

    setfullLrStringCheckList = set(fullLrStringCheckList)
    setfullLrStringCheckList = list(setfullLrStringCheckList)

    LRnum = 'LR-' + number[0]

    try:
        for i in setfullLrStringCheckList:
            if i not in inbox.Folders:
                inbox.Folders["20" + email.SentOn.strftime("%y")].Folders.add(i)
    except:
           print("Folder already exists")
           pass

    # #-------------------------------------------------------------------------------------------------------------
    # #This is the start of the section that goes onto Archer and extracts the Tags/Summary/Counsel

    funcTags = []
    listOfTags = []
    summary = ""
    lawyer = ""
    desktop = pathlib.Path.home()
    path = fr"{desktop}\Desktop\msedgedriver.exe"

    try:
        s = Service(path)
        driver = webdriver.Edge(service=s)
        driver.get(LrLink)
        link = driver.find_element(by=By.ID, value="btnSamlSSOLogin")
        link.click()




        element = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "iframe"))
        )
        print("iframe located")
        driver.switch_to.frame(driver.find_element(by= By.TAG_NAME, value="iframe"))
        print("switched frames")
                                                                #
        summary = driver.find_element(by=By.CSS_SELECTOR, value="#master_DefaultContent_rts_ts3583_s3584_f17791c")
        print("found summary")
        summary = summary.text                                  #

        lawyer = driver.find_element(by=By.CSS_SELECTOR, value="#master_DefaultContent_rts_ts3583_s3584_f17803c > ul > li > div > a")
        print("found lawyer")
        lawyer = lawyer.text

        try:
            listOfTags.append(driver.find_element(by=By.XPATH, value="//div[text()='PCU_Business_Auto']").text)
        except:
            pass
        try:
            listOfTags.append(driver.find_element(by=By.XPATH, value="//div[text()='PCU_Business_Fire']").text)
        except:
            pass
        try:
            listOfTags.append(driver.find_element(by=By.XPATH, value="//div[text()='PCU_Personal_Auto']").text)
        except:
            pass
        try:
            listOfTags.append(driver.find_element(by=By.XPATH, value="//div[text()='PCU_Personal_Fire']").text)
        except:
            pass

        driver.quit()
    except:
        driver.quit()
        print("this LR email does not need to run the intake process Or...")
        print("Not found, the selenium extraction failed.")

    print(summary)
    print(lawyer)
    print(listOfTags)

    # #------------------------------------------------------------------------------------------------------------
    # #This section pulls the functions from the excel document.

    #returns the LR's state
    States = {
        "Alabama": "AL",
        "Alaska": "AK",
        "Arizona": "AZ",
        "Arkansas": "AR",
        "California": "CA",
        "Colorado": "CO",
        "Connecticut": "CT",
        "Delaware": "DE",
        "Florida": "FL",
        "Georgia": "GA",
        "Hawaii": "HI",
        "Idaho": "ID",
        "Illinois": "IL",
        "Indiana": "IN",
        "Iowa": "IA",
        "Kansas": "KS",
        "Kentucky": "KY",
        "Louisiana": "LA",
        "Maine": "ME",
        "Maryland": "MD",
        "Massachusetts": "MA",
        "Michigan": "MI",
        "Minnesota": "MN",
        "Mississippi": "MS",
        "Missouri": "MO",
        "Montana": "MT",
        "Nebraska": "NE",
        "Nevada": "NV",
        "New Hampshire": "NH",
        "New Jersey": "NJ",
        "New Mexico": "NM",
        "New York": "NY",
        "North Carolina": "NC",
        "North Dakota": "ND",
        "Ohio": "OH",
        "Oklahoma": "OK",
        "Oregon": "OR",
        "Pennsylvania": "PA",
        "Rhode Island": "RI",
        "South Carolina": "SC",
        "South Dakota": "SD",
        "Tennessee": "TN",
        "Texas": "TX",
        "Utah": "UT",
        "Vermont": "VT",
        "Virginia": "VA",
        "Washington": "WA",
        "West Virginia": "WV",
        "Wisconsin": "WI",
        "Wyoming": "WY",
        "District of Columbia": "DC",
        "American Samoa": "AS",
        "Guam": "GU",
        "Northern Mariana Islands": "MP",
        "Puerto Rico": "PR",
        "United States Minor Outlying Islands": "UM",
        "U.S. Virgin Islands": "VI",
    }

    try:
        for j in States.values():
           y = re.search(j,email.Subject)
           if y is not None:
              LrState = y.group()
        print(LrState)
        #This sections converts the Function Tags and States so they can be used by the algorithm
        funcTagsDict = {'PCU_Business_Auto': 'BL-Auto', 'PCU_Business_Fire': 'BL-Fire', 'PCU_Personal_Auto': 'PL-Auto',
                        'PCU_Personal_Fire': 'PL-Fire'}
        for i,j in enumerate(listOfTags):
            for k in funcTagsDict:
                if j == k:
                    listOfTags[i] = funcTagsDict[k]
        print(listOfTags)
        for key, value in States.items():
             if LrState == value:
                 LrState = key
        print(LrState)
        #this section extracts from Excel document and creates a table
        wb = load_workbook(fr'{desktop}\Desktop\LR SPOC Contacts For Python Use.xlsx')
        ws = wb.active
        rows = []

        for row in range(2,ws.max_row):
            if ws[row][1].value == LrState and ws[row][3].value in listOfTags:
                rows.append(ws[row][1].row)
        copyRange = ws.iter_rows(min_row=min(rows), max_row=max(rows), min_col=2, max_col=8)
        valueRange = [j.value for i in copyRange for j in i]
        x.field_names = ["Jurisdiction","SPOC-Name", "Lines of Business","Market Area", "Consultant Personal Lines", "Consultant Business Lines", " ROC-Name"]

        for i in range(0,len(valueRange),7):
            x.add_row(valueRange[i:i+7])

        x._set_columns_style()


        #--------------------------------------------------------------------------------------------------------------
        #Last part creates the email and sends to user
        table = x.get_string()
        new_line = '\n'

        message = outlook.CreateItem(0)
        message.To = "home.pc-undr-leg-reg.613g00@statefarm.com"
        message.Subject = f"Automated LR Intake {LRnum}"
        message.Body = f"""{LrIntroText}"""   \
                           f"""\n""" \
                           f"""\n"""              \
                           f"""Date received: {date}""" \
                           f"""\n"""              \
                           f"""\n"""              \
                           f"""Leg/Reg Counsel: {lawyer}"""\
                           f"""\n"""              \
                           f"""\n"""              \
                           f"""Function tags:\n{new_line.join(map(str,listOfTags))}""" \
                           f"""\n"""                  \
                           f"""\n"""              \
                           f""" \n\n {table} \n \n""" \
                           f"""\n""" \
                           f"""\n""" \
                           f"""Please Review Hot Topic Contacts.""" \
                           f"""\n""" \
                           f"""\n""" \
                           f"""Summary: {summary}"""   \
                           f"""\n""" \
                           f"""\n""" \
                           f"""Action plan (y/n)""" \
                           f"""\n""" \
                           f"""\n""" \
                           f"""Action plan due date: """

        for i in alreadySentLR:
            if LRnum in alreadySentLR:
                print("email already sent")
                pass
            else:
                message.Send()

        alreadySentLR.append(LRnum)
        x.clear()
        messagecopy = email.Copy()
        messagecopy.Move(inbox.Folders[year].Folders[LRnum])
    except:

        print("this LR email does not need to run the intake process or...")
        print("part of the excel extraction failed.")